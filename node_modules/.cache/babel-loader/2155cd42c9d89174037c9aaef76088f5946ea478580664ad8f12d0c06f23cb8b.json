{"ast":null,"code":"const BASE_URL = \"http://127.0.0.1:3000\";\n\n// CLAVE API: 016f14e7761d4baca1c75b200bde1015\n// export const registerUserMock = async (email, password, name) => {\n//   return new Promise((resolve, reject) => {\n//     const user = {\n//       email, password, name\n//     }\n//     localStorage.setItem('dummyUser', JSON.stringify(user));\n//     resolve(user);\n//   })\n// }\n\nexport const registerUserMock = async (email, password, name) => {\n  return new Promise((resolve, reject) => {\n    // Obtener usuarios registrados del localStorage\n    const storedUsers = JSON.parse(localStorage.getItem(\"registeredUsers\")) || [];\n\n    // Verificar si el usuario ya está registrado por su dirección de correo electrónico\n    const isUserRegistered = storedUsers.some(user => user.email === email);\n    console.log(isUserRegistered);\n    if (isUserRegistered) {\n      // Usuario ya registrado\n      resolve(null);\n      console.log(\"El usuario ya está registrado\");\n    } else {\n      // Usuario no registrado, proceder con el registro\n      const user = {\n        email,\n        password,\n        name,\n        token: \"token\"\n      };\n\n      // Agregar nuevo usuario a la lista de usuarios registrados\n      storedUsers.push(user);\n      localStorage.setItem(\"registeredUsers\", JSON.stringify(storedUsers));\n      resolve(user);\n      console.log(\"El usuario registrado\", user);\n    }\n  });\n};\nexport const authorizeMock = async (email, password) => {\n  return new Promise((resolve, reject) => {\n    /**\r\n     *\r\n     * POST - Email y passsword\r\n     * Return token (jwt)\r\n     */\n    const storedUsers = JSON.parse(localStorage.getItem(\"registeredUsers\"));\n    console.log(\"storedUsers:\", storedUsers);\n    const authorizedUser = storedUsers.find(user => user.email === email && user.password === password);\n    console.log(authorizedUser);\n    if (authorizedUser) {\n      resolve({\n        token: \"token\",\n        authorizedUser\n      });\n    } else {\n      console.log(\"Invalid credentials\");\n      reject(new Error(\"Not found\"));\n    }\n  });\n};\nexport const checkTokenValidityMock = async ({\n  token,\n  authorizedUser\n}) => {\n  return new Promise((resolve, reject) => {\n    // Obtener usuarios registrados del localStorage\n    const storedUsers = JSON.parse(localStorage.getItem(\"registeredUsers\")) || [];\n\n    // Buscar el usuario correspondiente al token\n    const currentUser = storedUsers.find(user => user.email === authorizedUser.email);\n    console.log(currentUser);\n    if (currentUser) {\n      // Si se encuentra el usuario, resolver la promesa con el usuario\n      resolve(currentUser);\n    } else {\n      // Si no se encuentra el usuario, rechazar la promesa con un error\n      reject(new Error(\"Usuario no encontrado\"));\n    }\n  });\n};\n\n//  export const authorizeMock = async (email, password) => {\n//   return new Promise((resolve, reject) => {\n\n//     const dummyUser = JSON.parse(localStorage.getItem('dummyUser'));\n//     if(dummyUser.email === email && dummyUser.password === password){\n//       resolve({token: 'token'});\n//       return;\n//     }\n//     reject(new Error(\"Not found\"));\n//   })\n//  }\n\n// export const registerUser = async (email, password, name) => {\n//   try {\n//     const response = await fetch(`${BASE_URL}/signup`, {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ email, password, name }),\n//     });\n\n//     if (response.ok) {\n//       const data = await response.json();\n//       return data;\n//     } else {\n//       const errorData = await response.json();\n//       console.error(\"Error during registration:\", errorData);\n//       throw new Error(\"Registration failed\");\n//     }\n//   } catch (error) {\n//     console.error(\"Error during registration:\", error);\n//     throw error;\n//   }\n// };\n\n// export const authorize = async (email, password) => {\n//   try {\n//     const response = await fetch(`${BASE_URL}/signin`, {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ email, password}),\n//     });\n\n//     if (response.ok) {\n//       const data = await response.json();\n//       if (data && data.token) {\n//         localStorage.setItem(\"jwt\", data.token);\n//         return data;\n//       } else {\n//         console.error(\"La respuesta del servidor no contiene un token válido.\");\n//       }\n//     } else {\n//       console.error(\"Error en la respuesta del servidor:\", response.status);\n//     }\n//   } catch (err) {\n//     console.error(\"Error en la solicitud:\", err);\n//   }\n// };\n\n// export const checkTokenValidity = async (token) => {\n//   const response = await fetch(`${BASE_URL}/users/me`, {\n//     method: \"GET\",\n//     headers: {\n//       Accept: \"application/json\",\n//       \"Content-Type\": \"application/json\",\n//       Authorization: `Bearer ${token}`,\n//     },\n//   });\n\n//   if (response.ok) {\n//     const data = await response.json();\n//     return data;\n//   } else {\n//     throw new Error(\"Token inválido\");\n//   }\n// };","map":{"version":3,"names":["BASE_URL","registerUserMock","email","password","name","Promise","resolve","reject","storedUsers","JSON","parse","localStorage","getItem","isUserRegistered","some","user","console","log","token","push","setItem","stringify","authorizeMock","authorizedUser","find","Error","checkTokenValidityMock","currentUser"],"sources":["C:/Users/shaye/Proyecto_Final/News_Explorer/news-explorer-frontend/src/utils/auth.js"],"sourcesContent":["const BASE_URL = \"http://127.0.0.1:3000\";\r\n\r\n// CLAVE API: 016f14e7761d4baca1c75b200bde1015\r\n// export const registerUserMock = async (email, password, name) => {\r\n//   return new Promise((resolve, reject) => {\r\n//     const user = {\r\n//       email, password, name\r\n//     }\r\n//     localStorage.setItem('dummyUser', JSON.stringify(user));\r\n//     resolve(user);\r\n//   })\r\n// }\r\n\r\nexport const registerUserMock = async (email, password, name) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Obtener usuarios registrados del localStorage\r\n    const storedUsers =\r\n      JSON.parse(localStorage.getItem(\"registeredUsers\")) || [];\r\n\r\n    // Verificar si el usuario ya está registrado por su dirección de correo electrónico\r\n    const isUserRegistered = storedUsers.some((user) => user.email === email);\r\n    console.log(isUserRegistered);\r\n\r\n    if (isUserRegistered) {\r\n      // Usuario ya registrado\r\n      resolve(null);\r\n      console.log(\"El usuario ya está registrado\");\r\n    } else {\r\n      // Usuario no registrado, proceder con el registro\r\n      const user = { email, password, name, token: \"token\" };\r\n\r\n      // Agregar nuevo usuario a la lista de usuarios registrados\r\n      storedUsers.push(user);\r\n      localStorage.setItem(\"registeredUsers\", JSON.stringify(storedUsers));\r\n\r\n      resolve(user);\r\n      console.log(\"El usuario registrado\", user);\r\n    }\r\n  });\r\n};\r\n\r\nexport const authorizeMock = async (email, password) => {\r\n  return new Promise((resolve, reject) => {\r\n    /**\r\n     *\r\n     * POST - Email y passsword\r\n     * Return token (jwt)\r\n     */\r\n    const storedUsers = JSON.parse(localStorage.getItem(\"registeredUsers\"));\r\n    console.log(\"storedUsers:\", storedUsers);\r\n\r\n    const authorizedUser = storedUsers.find(\r\n      (user) => user.email === email && user.password === password\r\n    );\r\n\r\n    console.log(authorizedUser);\r\n\r\n    if (authorizedUser) {\r\n      resolve({ token: \"token\", authorizedUser });\r\n    } else {\r\n      console.log(\"Invalid credentials\");\r\n      reject(new Error(\"Not found\"));\r\n    }\r\n  });\r\n};\r\n\r\nexport const checkTokenValidityMock = async ({ token, authorizedUser }) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Obtener usuarios registrados del localStorage\r\n    const storedUsers =\r\n      JSON.parse(localStorage.getItem(\"registeredUsers\")) || [];\r\n\r\n    // Buscar el usuario correspondiente al token\r\n    const currentUser = storedUsers.find(\r\n      (user) => user.email === authorizedUser.email\r\n    );\r\n\r\n    console.log(currentUser);\r\n\r\n    if (currentUser) {\r\n      // Si se encuentra el usuario, resolver la promesa con el usuario\r\n      resolve(currentUser);\r\n    } else {\r\n      // Si no se encuentra el usuario, rechazar la promesa con un error\r\n      reject(new Error(\"Usuario no encontrado\"));\r\n    }\r\n  });\r\n};\r\n\r\n//  export const authorizeMock = async (email, password) => {\r\n//   return new Promise((resolve, reject) => {\r\n\r\n//     const dummyUser = JSON.parse(localStorage.getItem('dummyUser'));\r\n//     if(dummyUser.email === email && dummyUser.password === password){\r\n//       resolve({token: 'token'});\r\n//       return;\r\n//     }\r\n//     reject(new Error(\"Not found\"));\r\n//   })\r\n//  }\r\n\r\n// export const registerUser = async (email, password, name) => {\r\n//   try {\r\n//     const response = await fetch(`${BASE_URL}/signup`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({ email, password, name }),\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       const data = await response.json();\r\n//       return data;\r\n//     } else {\r\n//       const errorData = await response.json();\r\n//       console.error(\"Error during registration:\", errorData);\r\n//       throw new Error(\"Registration failed\");\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"Error during registration:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const authorize = async (email, password) => {\r\n//   try {\r\n//     const response = await fetch(`${BASE_URL}/signin`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({ email, password}),\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       const data = await response.json();\r\n//       if (data && data.token) {\r\n//         localStorage.setItem(\"jwt\", data.token);\r\n//         return data;\r\n//       } else {\r\n//         console.error(\"La respuesta del servidor no contiene un token válido.\");\r\n//       }\r\n//     } else {\r\n//       console.error(\"Error en la respuesta del servidor:\", response.status);\r\n//     }\r\n//   } catch (err) {\r\n//     console.error(\"Error en la solicitud:\", err);\r\n//   }\r\n// };\r\n\r\n// export const checkTokenValidity = async (token) => {\r\n//   const response = await fetch(`${BASE_URL}/users/me`, {\r\n//     method: \"GET\",\r\n//     headers: {\r\n//       Accept: \"application/json\",\r\n//       \"Content-Type\": \"application/json\",\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//   });\r\n\r\n//   if (response.ok) {\r\n//     const data = await response.json();\r\n//     return data;\r\n//   } else {\r\n//     throw new Error(\"Token inválido\");\r\n//   }\r\n// };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}