{"ast":null,"code":"const BASE_URL = \"http://127.0.0.1:3000\";\n\n// export const registerUser = async (email, password, name) => {\n//     return fetch(`${BASE_URL}/signup`, {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ email, password, name }),\n//     })\n//       .then((response) => {\n//         if (response.status === 201) {\n//           return response.json();\n//         }\n//       })\n//       .then((res) => {\n//         return res;\n//       });\n//   };\n\nexport const registerUser = async (email, password, name) => {\n  // Simular una solicitud al servidor (usando setTimeout para simular una demora)\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Verificar si el correo electrónico ya está registrado (simulación)\n      const isEmailTaken = localStorage.getItem(email);\n      if (isEmailTaken) {\n        reject(\"El correo electrónico ya está registrado.\");\n      } else {\n        // Almacenar la información del usuario en el almacenamiento local\n        localStorage.setItem(email, JSON.stringify({\n          email,\n          password,\n          name\n        }));\n        resolve({\n          message: \"Registro exitoso.\"\n        });\n      }\n    }, 1000); // Simular una demora de 1 segundo\n  });\n};\n\n// export const authorize = async (email, password) => {\n//   try {\n//     const response = await fetch(`${BASE_URL}/signin`, {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ email, password}),\n//     });\n\n//     if (response.ok) {\n//       const data = await response.json();\n//       if (data && data.token) {\n//         localStorage.setItem(\"jwt\", data.token);\n//         return data;\n//       } else {\n//         console.error(\"La respuesta del servidor no contiene un token válido.\");\n//       }\n//     } else {\n//       console.error(\"Error en la respuesta del servidor:\", response.status);\n//     }\n//   } catch (err) {\n//     console.error(\"Error en la solicitud:\", err);\n//   }\n// };\n\nexport const authorize = async (email, password) => {\n  // Simular una solicitud al servidor (usando setTimeout para simular una demora)\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Obtener la información del usuario del almacenamiento local\n      const userDataString = localStorage.getItem(email);\n      if (userDataString) {\n        const userData = JSON.parse(userDataString);\n        // Verificar la contraseña (simulación)\n        if (userData.password === password) {\n          resolve({\n            token: \"fakeToken\",\n            user: userData\n          });\n        } else {\n          reject(\"Contraseña incorrecta.\");\n        }\n      } else {\n        reject(\"Usuario no encontrado.\");\n      }\n    }, 1000); // Simular una demora de 1 segundo\n  });\n};\n\nexport const checkTokenValidity = async token => {\n  const response = await fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  } else {\n    throw new Error(\"Token inválido\");\n  }\n};","map":{"version":3,"names":["BASE_URL","registerUser","email","password","name","Promise","resolve","reject","setTimeout","isEmailTaken","localStorage","getItem","setItem","JSON","stringify","message","authorize","userDataString","userData","parse","token","user","checkTokenValidity","response","fetch","method","headers","Accept","Authorization","ok","data","json","Error"],"sources":["C:/Users/shaye/Proyecto_Final/News_Explorer/news-explorer-frontend/src/utils/auth.js"],"sourcesContent":["const BASE_URL = \"http://127.0.0.1:3000\";\r\n\r\n\r\n// export const registerUser = async (email, password, name) => {\r\n//     return fetch(`${BASE_URL}/signup`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({ email, password, name }),\r\n//     })\r\n//       .then((response) => {\r\n//         if (response.status === 201) {\r\n//           return response.json();\r\n//         }\r\n//       })\r\n//       .then((res) => {\r\n//         return res;\r\n//       });\r\n//   };\r\n\r\nexport const registerUser = async (email, password, name) => {\r\n    // Simular una solicitud al servidor (usando setTimeout para simular una demora)\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        // Verificar si el correo electrónico ya está registrado (simulación)\r\n        const isEmailTaken = localStorage.getItem(email);\r\n        if (isEmailTaken) {\r\n          reject(\"El correo electrónico ya está registrado.\");\r\n        } else {\r\n          // Almacenar la información del usuario en el almacenamiento local\r\n          localStorage.setItem(email, JSON.stringify({ email, password, name }));\r\n          resolve({ message: \"Registro exitoso.\" });\r\n        }\r\n      }, 1000); // Simular una demora de 1 segundo\r\n    });\r\n  };\r\n\r\n// export const authorize = async (email, password) => {\r\n//   try {\r\n//     const response = await fetch(`${BASE_URL}/signin`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({ email, password}),\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       const data = await response.json();\r\n//       if (data && data.token) {\r\n//         localStorage.setItem(\"jwt\", data.token);\r\n//         return data;\r\n//       } else {\r\n//         console.error(\"La respuesta del servidor no contiene un token válido.\");\r\n//       }\r\n//     } else {\r\n//       console.error(\"Error en la respuesta del servidor:\", response.status);\r\n//     }\r\n//   } catch (err) {\r\n//     console.error(\"Error en la solicitud:\", err);\r\n//   }\r\n// };\r\n\r\nexport const authorize = async (email, password) => {\r\n    // Simular una solicitud al servidor (usando setTimeout para simular una demora)\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        // Obtener la información del usuario del almacenamiento local\r\n        const userDataString = localStorage.getItem(email);\r\n        if (userDataString) {\r\n          const userData = JSON.parse(userDataString);\r\n          // Verificar la contraseña (simulación)\r\n          if (userData.password === password) {\r\n            resolve({ token: \"fakeToken\", user: userData });\r\n          } else {\r\n            reject(\"Contraseña incorrecta.\");\r\n          }\r\n        } else {\r\n          reject(\"Usuario no encontrado.\");\r\n        }\r\n      }, 1000); // Simular una demora de 1 segundo\r\n    });\r\n  };\r\n\r\nexport const checkTokenValidity = async (token) => {\r\n  const response = await fetch(`${BASE_URL}/users/me`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n\r\n  if (response.ok) {\r\n    const data = await response.json();\r\n    return data;\r\n  } else {\r\n    throw new Error(\"Token inválido\");\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;;AAGxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;EACzD;EACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,UAAU,CAAC,MAAM;MACf;MACA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAACT,KAAK,CAAC;MAChD,IAAIO,YAAY,EAAE;QAChBF,MAAM,CAAC,2CAA2C,CAAC;MACrD,CAAC,MAAM;QACL;QACAG,YAAY,CAACE,OAAO,CAACV,KAAK,EAAEW,IAAI,CAACC,SAAS,CAAC;UAAEZ,KAAK;UAAEC,QAAQ;UAAEC;QAAK,CAAC,CAAC,CAAC;QACtEE,OAAO,CAAC;UAAES,OAAO,EAAE;QAAoB,CAAC,CAAC;MAC3C;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOd,KAAK,EAAEC,QAAQ,KAAK;EAChD;EACA,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,UAAU,CAAC,MAAM;MACf;MACA,MAAMS,cAAc,GAAGP,YAAY,CAACC,OAAO,CAACT,KAAK,CAAC;MAClD,IAAIe,cAAc,EAAE;QAClB,MAAMC,QAAQ,GAAGL,IAAI,CAACM,KAAK,CAACF,cAAc,CAAC;QAC3C;QACA,IAAIC,QAAQ,CAACf,QAAQ,KAAKA,QAAQ,EAAE;UAClCG,OAAO,CAAC;YAAEc,KAAK,EAAE,WAAW;YAAEC,IAAI,EAAEH;UAAS,CAAC,CAAC;QACjD,CAAC,MAAM;UACLX,MAAM,CAAC,wBAAwB,CAAC;QAClC;MACF,CAAC,MAAM;QACLA,MAAM,CAAC,wBAAwB,CAAC;MAClC;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ,CAAC;;AAEH,OAAO,MAAMe,kBAAkB,GAAG,MAAOF,KAAK,IAAK;EACjD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAExB,QAAS,WAAU,EAAE;IACnDyB,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAASR,KAAM;IACjC;EACF,CAAC,CAAC;EAEF,IAAIG,QAAQ,CAACM,EAAE,EAAE;IACf,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,MAAM;IACL,MAAM,IAAIE,KAAK,CAAC,gBAAgB,CAAC;EACnC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}