{"ast":null,"code":"const BASE_URL = \"http://127.0.0.1:3000\";\nexport const registerUser = async (email, password, name) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signup`, {\n      // ... (tu configuración de la solicitud)\n    });\n    if (response.status === 201) {\n      return response.json();\n      console.log(\"usuario\");\n    } else {\n      const errorData = await response.json();\n      throw new Error(errorData.message); // Lanza una excepción con el mensaje de error del servidor\n    }\n  } catch (error) {\n    throw error; // Lanza la excepción para que pueda ser manejada en el componente Register\n  }\n};\n\nexport const authorize = async (email, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signin`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      if (data && data.token) {\n        localStorage.setItem(\"jwt\", data.token);\n        return data;\n      } else {\n        console.error(\"La respuesta del servidor no contiene un token válido.\");\n      }\n    } else {\n      console.error(\"Error en la respuesta del servidor:\", response.status);\n    }\n  } catch (err) {\n    console.error(\"Error en la solicitud:\", err);\n  }\n};\nexport const checkTokenValidity = async token => {\n  const response = await fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  } else {\n    throw new Error(\"Token inválido\");\n  }\n};","map":{"version":3,"names":["BASE_URL","registerUser","email","password","name","response","fetch","status","json","console","log","errorData","Error","message","error","authorize","method","headers","Accept","body","JSON","stringify","ok","data","token","localStorage","setItem","err","checkTokenValidity","Authorization"],"sources":["C:/Users/shaye/Proyecto_Final/News_Explorer/news-explorer-frontend/src/utils/auth.js"],"sourcesContent":["const BASE_URL = \"http://127.0.0.1:3000\";\r\n\r\n\r\nexport const registerUser = async (email, password, name) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/signup`, {\r\n        // ... (tu configuración de la solicitud)\r\n      });\r\n  \r\n      if (response.status === 201) {\r\n        return response.json();\r\n        console.log(\"usuario\")\r\n      } else {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message);  // Lanza una excepción con el mensaje de error del servidor\r\n      }\r\n    } catch (error) {\r\n      throw error;  // Lanza la excepción para que pueda ser manejada en el componente Register\r\n    }\r\n  };\r\n\r\nexport const authorize = async (email, password) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/signin`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password}),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      if (data && data.token) {\r\n        localStorage.setItem(\"jwt\", data.token);\r\n        return data;\r\n      } else {\r\n        console.error(\"La respuesta del servidor no contiene un token válido.\");\r\n      }\r\n    } else {\r\n      console.error(\"Error en la respuesta del servidor:\", response.status);\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Error en la solicitud:\", err);\r\n  }\r\n};\r\n\r\nexport const checkTokenValidity = async (token) => {\r\n  const response = await fetch(`${BASE_URL}/users/me`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n\r\n  if (response.ok) {\r\n    const data = await response.json();\r\n    return data;\r\n  } else {\r\n    throw new Error(\"Token inválido\");\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;AAGxC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;EACzD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,QAAS,SAAQ,EAAE;MACjD;IAAA,CACD,CAAC;IAEF,IAAIK,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACtBC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACxB,CAAC,MAAM;MACL,MAAMC,SAAS,GAAG,MAAMN,QAAQ,CAACG,IAAI,CAAC,CAAC;MACvC,MAAM,IAAII,KAAK,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,CAAE;IACvC;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK,CAAC,CAAE;EAChB;AACF,CAAC;;AAEH,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOb,KAAK,EAAEC,QAAQ,KAAK;EAClD,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,QAAS,SAAQ,EAAE;MACjDgB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEnB,KAAK;QAAEC;MAAQ,CAAC;IACzC,CAAC,CAAC;IAEF,IAAIE,QAAQ,CAACiB,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMlB,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAIe,IAAI,IAAIA,IAAI,CAACC,KAAK,EAAE;QACtBC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,IAAI,CAACC,KAAK,CAAC;QACvC,OAAOD,IAAI;MACb,CAAC,MAAM;QACLd,OAAO,CAACK,KAAK,CAAC,wDAAwD,CAAC;MACzE;IACF,CAAC,MAAM;MACLL,OAAO,CAACK,KAAK,CAAC,qCAAqC,EAAET,QAAQ,CAACE,MAAM,CAAC;IACvE;EACF,CAAC,CAAC,OAAOoB,GAAG,EAAE;IACZlB,OAAO,CAACK,KAAK,CAAC,wBAAwB,EAAEa,GAAG,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAOJ,KAAK,IAAK;EACjD,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,QAAS,WAAU,EAAE;IACnDgB,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCW,aAAa,EAAG,UAASL,KAAM;IACjC;EACF,CAAC,CAAC;EAEF,IAAInB,QAAQ,CAACiB,EAAE,EAAE;IACf,MAAMC,IAAI,GAAG,MAAMlB,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOe,IAAI;EACb,CAAC,MAAM;IACL,MAAM,IAAIX,KAAK,CAAC,gBAAgB,CAAC;EACnC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}