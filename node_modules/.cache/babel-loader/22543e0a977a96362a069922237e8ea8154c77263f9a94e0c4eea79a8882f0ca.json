{"ast":null,"code":"const BASE_URL = \"http://127.0.0.1:3000\";\nexport const registerUser = async (email, password, name) => {\n  console.log(email, password, name);\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password,\n      name\n    })\n  }).then(response => {\n    if (response.status === 201) {\n      return response.json();\n    }\n  }).then(res => {\n    return res;\n  });\n};\nexport const authorize = async (email, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signin`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      if (data && data.token) {\n        localStorage.setItem(\"jwt\", data.token);\n        return data;\n      } else {\n        console.error(\"La respuesta del servidor no contiene un token v치lido.\");\n      }\n    } else {\n      console.error(\"Error en la respuesta del servidor:\", response.status);\n    }\n  } catch (err) {\n    console.error(\"Error en la solicitud:\", err);\n  }\n};\nexport const checkTokenValidity = async token => {\n  const response = await fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  } else {\n    throw new Error(\"Token inv치lido\");\n  }\n};","map":{"version":3,"names":["BASE_URL","registerUser","email","password","name","console","log","fetch","method","headers","Accept","body","JSON","stringify","then","response","status","json","res","authorize","ok","data","token","localStorage","setItem","error","err","checkTokenValidity","Authorization","Error"],"sources":["C:/Users/shaye/Proyecto_Final/News_Explorer/news-explorer-frontend/src/utils/auth.js"],"sourcesContent":["const BASE_URL = \"http://127.0.0.1:3000\";\r\n\r\n\r\nexport const registerUser = async (email, password, name) => {\r\n    console.log(email, password, name)\r\n    return fetch(`${BASE_URL}/signup`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password, name }),\r\n    })\r\n      .then((response) => {\r\n        if (response.status === 201) {\r\n          return response.json();\r\n        }\r\n      })\r\n      .then((res) => {\r\n        return res;\r\n      });\r\n  };\r\n\r\nexport const authorize = async (email, password) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/signin`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password}),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      if (data && data.token) {\r\n        localStorage.setItem(\"jwt\", data.token);\r\n        return data;\r\n      } else {\r\n        console.error(\"La respuesta del servidor no contiene un token v치lido.\");\r\n      }\r\n    } else {\r\n      console.error(\"Error en la respuesta del servidor:\", response.status);\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Error en la solicitud:\", err);\r\n  }\r\n};\r\n\r\nexport const checkTokenValidity = async (token) => {\r\n  const response = await fetch(`${BASE_URL}/users/me`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n\r\n  if (response.ok) {\r\n    const data = await response.json();\r\n    return data;\r\n  } else {\r\n    throw new Error(\"Token inv치lido\");\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;AAGxC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;EACzDC,OAAO,CAACC,GAAG,CAACJ,KAAK,EAAEC,QAAQ,EAAEC,IAAI,CAAC;EAClC,OAAOG,KAAK,CAAE,GAAEP,QAAS,SAAQ,EAAE;IACjCQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEX,KAAK;MAAEC,QAAQ;MAAEC;IAAK,CAAC;EAChD,CAAC,CAAC,CACCU,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB;EACF,CAAC,CAAC,CACDH,IAAI,CAAEI,GAAG,IAAK;IACb,OAAOA,GAAG;EACZ,CAAC,CAAC;AACN,CAAC;AAEH,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOjB,KAAK,EAAEC,QAAQ,KAAK;EAClD,IAAI;IACF,MAAMY,QAAQ,GAAG,MAAMR,KAAK,CAAE,GAAEP,QAAS,SAAQ,EAAE;MACjDQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEX,KAAK;QAAEC;MAAQ,CAAC;IACzC,CAAC,CAAC;IAEF,IAAIY,QAAQ,CAACK,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,IAAII,IAAI,IAAIA,IAAI,CAACC,KAAK,EAAE;QACtBC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,IAAI,CAACC,KAAK,CAAC;QACvC,OAAOD,IAAI;MACb,CAAC,MAAM;QACLhB,OAAO,CAACoB,KAAK,CAAC,wDAAwD,CAAC;MACzE;IACF,CAAC,MAAM;MACLpB,OAAO,CAACoB,KAAK,CAAC,qCAAqC,EAAEV,QAAQ,CAACC,MAAM,CAAC;IACvE;EACF,CAAC,CAAC,OAAOU,GAAG,EAAE;IACZrB,OAAO,CAACoB,KAAK,CAAC,wBAAwB,EAAEC,GAAG,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAOL,KAAK,IAAK;EACjD,MAAMP,QAAQ,GAAG,MAAMR,KAAK,CAAE,GAAEP,QAAS,WAAU,EAAE;IACnDQ,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCkB,aAAa,EAAG,UAASN,KAAM;IACjC;EACF,CAAC,CAAC;EAEF,IAAIP,QAAQ,CAACK,EAAE,EAAE;IACf,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACE,IAAI,CAAC,CAAC;IAClC,OAAOI,IAAI;EACb,CAAC,MAAM;IACL,MAAM,IAAIQ,KAAK,CAAC,gBAAgB,CAAC;EACnC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}