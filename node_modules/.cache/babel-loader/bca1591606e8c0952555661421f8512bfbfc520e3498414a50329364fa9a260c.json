{"ast":null,"code":"const BASE_URL = \"http://127.0.0.1:3000\";\n\n// CLAVE API: 016f14e7761d4baca1c75b200bde1015\n// export const registerUserMock = async (email, password, name) => {\n//   return new Promise((resolve, reject) => {\n//     const user = {\n//       email, password, name\n//     }\n//     localStorage.setItem('dummyUser', JSON.stringify(user));\n//     resolve(user);\n//   })\n// }\n\nexport const registerUserMock = async (email, password, name) => {\n  return new Promise((resolve, reject) => {\n    // Obtener usuarios registrados del localStorage\n    const storedUsers = JSON.parse(localStorage.getItem('registeredUsers')) || [];\n\n    // Verificar si el usuario ya está registrado por su dirección de correo electrónico\n    const isUserRegistered = storedUsers.some(user => user.email === email);\n    if (isUserRegistered) {\n      // Usuario ya registrado\n      resolve(null);\n      console.log(\"El usuario ya está registrado\");\n    } else {\n      // Usuario no registrado, proceder con el registro\n      const user = {\n        email,\n        password,\n        name\n      };\n\n      // Agregar nuevo usuario a la lista de usuarios registrados\n      storedUsers.push(user);\n      localStorage.setItem('registeredUsers', JSON.stringify(storedUsers));\n      resolve(user);\n      console.log(\"El usuario registrado\", user);\n    }\n  });\n};\nexport const authorizeMock = async (email, password) => {\n  return new Promise((resolve, reject) => {\n    const dummyUser = JSON.parse(localStorage.getItem('dummyUser'));\n    console.log('dummyUser:', dummyUser);\n    if (dummyUser && dummyUser.email === email && dummyUser.password === password) {\n      resolve({\n        token: 'token'\n      });\n    } else {\n      console.log('Invalid credentials');\n      reject(new Error(\"Not found\"));\n    }\n  });\n};\nexport const checkTokenValidityMock = async token => {\n  return new Promise((resolve, reject) => {\n    const dummyUser = localStorage.getItem('dummyUser');\n    resolve(JSON.parse(dummyUser));\n  });\n};\n\n//  export const authorizeMock = async (email, password) => {\n//   return new Promise((resolve, reject) => {\n\n//     const dummyUser = JSON.parse(localStorage.getItem('dummyUser'));\n//     if(dummyUser.email === email && dummyUser.password === password){\n//       resolve({token: 'token'});\n//       return;\n//     }\n//     reject(new Error(\"Not found\"));\n//   })\n//  }\n\n// export const registerUser = async (email, password, name) => {\n//   try {\n//     const response = await fetch(`${BASE_URL}/signup`, {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ email, password, name }),\n//     });\n\n//     if (response.ok) {\n//       const data = await response.json();\n//       return data;\n//     } else {\n//       const errorData = await response.json();\n//       console.error(\"Error during registration:\", errorData);\n//       throw new Error(\"Registration failed\");\n//     }\n//   } catch (error) {\n//     console.error(\"Error during registration:\", error);\n//     throw error;\n//   }\n// };\n\n// export const authorize = async (email, password) => {\n//   try {\n//     const response = await fetch(`${BASE_URL}/signin`, {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ email, password}),\n//     });\n\n//     if (response.ok) {\n//       const data = await response.json();\n//       if (data && data.token) {\n//         localStorage.setItem(\"jwt\", data.token);\n//         return data;\n//       } else {\n//         console.error(\"La respuesta del servidor no contiene un token válido.\");\n//       }\n//     } else {\n//       console.error(\"Error en la respuesta del servidor:\", response.status);\n//     }\n//   } catch (err) {\n//     console.error(\"Error en la solicitud:\", err);\n//   }\n// };\n\n// export const checkTokenValidity = async (token) => {\n//   const response = await fetch(`${BASE_URL}/users/me`, {\n//     method: \"GET\",\n//     headers: {\n//       Accept: \"application/json\",\n//       \"Content-Type\": \"application/json\",\n//       Authorization: `Bearer ${token}`,\n//     },\n//   });\n\n//   if (response.ok) {\n//     const data = await response.json();\n//     return data;\n//   } else {\n//     throw new Error(\"Token inválido\");\n//   }\n// };","map":{"version":3,"names":["BASE_URL","registerUserMock","email","password","name","Promise","resolve","reject","storedUsers","JSON","parse","localStorage","getItem","isUserRegistered","some","user","console","log","push","setItem","stringify","authorizeMock","dummyUser","token","Error","checkTokenValidityMock"],"sources":["C:/Users/shaye/Proyecto_Final/News_Explorer/news-explorer-frontend/src/utils/auth.js"],"sourcesContent":["const BASE_URL = \"http://127.0.0.1:3000\";\r\n\r\n// CLAVE API: 016f14e7761d4baca1c75b200bde1015\r\n// export const registerUserMock = async (email, password, name) => {\r\n//   return new Promise((resolve, reject) => {\r\n//     const user = {\r\n//       email, password, name\r\n//     }\r\n//     localStorage.setItem('dummyUser', JSON.stringify(user));\r\n//     resolve(user);\r\n//   })\r\n// }\r\n\r\nexport const registerUserMock = async (email, password, name) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Obtener usuarios registrados del localStorage\r\n    const storedUsers = JSON.parse(localStorage.getItem('registeredUsers')) || [];\r\n\r\n    // Verificar si el usuario ya está registrado por su dirección de correo electrónico\r\n    const isUserRegistered = storedUsers.some(user => user.email === email);\r\n\r\n    if (isUserRegistered) {\r\n      // Usuario ya registrado\r\n      resolve(null);\r\n      console.log(\"El usuario ya está registrado\");\r\n    } else {\r\n      // Usuario no registrado, proceder con el registro\r\n      const user = { email, password, name };\r\n\r\n      // Agregar nuevo usuario a la lista de usuarios registrados\r\n      storedUsers.push(user);\r\n      localStorage.setItem('registeredUsers', JSON.stringify(storedUsers));\r\n\r\n      resolve(user);\r\n      console.log(\"El usuario registrado\", user);\r\n    }\r\n  });\r\n};\r\n\r\n\r\n export const authorizeMock = async (email, password) => {\r\n  return new Promise((resolve, reject) => {\r\n    const dummyUser = JSON.parse(localStorage.getItem('dummyUser'));\r\n    console.log('dummyUser:', dummyUser);\r\n\r\n    if (dummyUser && dummyUser.email === email && dummyUser.password === password) {\r\n      resolve({ token: 'token' });\r\n    } else {\r\n      console.log('Invalid credentials');\r\n      reject(new Error(\"Not found\"));\r\n    }\r\n  });\r\n}\r\n\r\n export const checkTokenValidityMock = async (token) => {\r\n  return new Promise((resolve, reject) => {\r\n    const dummyUser = localStorage.getItem('dummyUser');\r\n    resolve(JSON.parse(dummyUser));\r\n  })\r\n }\r\n\r\n\r\n //  export const authorizeMock = async (email, password) => {\r\n//   return new Promise((resolve, reject) => {\r\n    \r\n//     const dummyUser = JSON.parse(localStorage.getItem('dummyUser'));\r\n//     if(dummyUser.email === email && dummyUser.password === password){\r\n//       resolve({token: 'token'});\r\n//       return;\r\n//     }\r\n//     reject(new Error(\"Not found\"));\r\n//   })\r\n//  }\r\n\r\n\r\n\r\n\r\n// export const registerUser = async (email, password, name) => {\r\n//   try {\r\n//     const response = await fetch(`${BASE_URL}/signup`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({ email, password, name }),\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       const data = await response.json();\r\n//       return data;\r\n//     } else {\r\n//       const errorData = await response.json();\r\n//       console.error(\"Error during registration:\", errorData);\r\n//       throw new Error(\"Registration failed\");\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"Error during registration:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const authorize = async (email, password) => {\r\n//   try {\r\n//     const response = await fetch(`${BASE_URL}/signin`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({ email, password}),\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       const data = await response.json();\r\n//       if (data && data.token) {\r\n//         localStorage.setItem(\"jwt\", data.token);\r\n//         return data;\r\n//       } else {\r\n//         console.error(\"La respuesta del servidor no contiene un token válido.\");\r\n//       }\r\n//     } else {\r\n//       console.error(\"Error en la respuesta del servidor:\", response.status);\r\n//     }\r\n//   } catch (err) {\r\n//     console.error(\"Error en la solicitud:\", err);\r\n//   }\r\n// };\r\n\r\n// export const checkTokenValidity = async (token) => {\r\n//   const response = await fetch(`${BASE_URL}/users/me`, {\r\n//     method: \"GET\",\r\n//     headers: {\r\n//       Accept: \"application/json\",\r\n//       \"Content-Type\": \"application/json\",\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//   });\r\n\r\n//   if (response.ok) {\r\n//     const data = await response.json();\r\n//     return data;\r\n//   } else {\r\n//     throw new Error(\"Token inválido\");\r\n//   }\r\n// };"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;EAC/D,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,EAAE;;IAE7E;IACA,MAAMC,gBAAgB,GAAGL,WAAW,CAACM,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACb,KAAK,KAAKA,KAAK,CAAC;IAEvE,IAAIW,gBAAgB,EAAE;MACpB;MACAP,OAAO,CAAC,IAAI,CAAC;MACbU,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC9C,CAAC,MAAM;MACL;MACA,MAAMF,IAAI,GAAG;QAAEb,KAAK;QAAEC,QAAQ;QAAEC;MAAK,CAAC;;MAEtC;MACAI,WAAW,CAACU,IAAI,CAACH,IAAI,CAAC;MACtBJ,YAAY,CAACQ,OAAO,CAAC,iBAAiB,EAAEV,IAAI,CAACW,SAAS,CAACZ,WAAW,CAAC,CAAC;MAEpEF,OAAO,CAACS,IAAI,CAAC;MACbC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,IAAI,CAAC;IAC5C;EACF,CAAC,CAAC;AACJ,CAAC;AAGA,OAAO,MAAMM,aAAa,GAAG,MAAAA,CAAOnB,KAAK,EAAEC,QAAQ,KAAK;EACvD,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMe,SAAS,GAAGb,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC/DI,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEK,SAAS,CAAC;IAEpC,IAAIA,SAAS,IAAIA,SAAS,CAACpB,KAAK,KAAKA,KAAK,IAAIoB,SAAS,CAACnB,QAAQ,KAAKA,QAAQ,EAAE;MAC7EG,OAAO,CAAC;QAAEiB,KAAK,EAAE;MAAQ,CAAC,CAAC;IAC7B,CAAC,MAAM;MACLP,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCV,MAAM,CAAC,IAAIiB,KAAK,CAAC,WAAW,CAAC,CAAC;IAChC;EACF,CAAC,CAAC;AACJ,CAAC;AAEA,OAAO,MAAMC,sBAAsB,GAAG,MAAOF,KAAK,IAAK;EACtD,OAAO,IAAIlB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMe,SAAS,GAAGX,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnDN,OAAO,CAACG,IAAI,CAACC,KAAK,CAACY,SAAS,CAAC,CAAC;EAChC,CAAC,CAAC;AACH,CAAC;;AAGD;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}